#!/bin/bash
# =============================================================================
# Rotation Trading Live Monitor
# =============================================================================
# Real-time monitoring dashboard for 12-symbol rotation trading
# Usage: ./tools/monitor_rotation_trading.sh
#
# Features:
#   - Process status (C++ trader + Python WebSocket bridge)
#   - Live bar reception from all 12 symbols
#   - Recent signals across all symbols
#   - Current positions and P&L
#   - Bridge health and bar counts
#   - Auto-refresh every 5 seconds
#
# Author: Generated by Claude Code
# Date: 2025-10-16
# =============================================================================

PROJECT_ROOT="/Volumes/ExternalSSD/Dev/C++/online_trader"
LOG_DIR="$PROJECT_ROOT/logs/rotation_live"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to print section header
print_header() {
    echo -e "${BOLD}${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BOLD}${CYAN}$1${NC}"
    echo -e "${BOLD}${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Clear screen and show header
clear
echo ""
print_header "📊 12-Symbol Rotation Trading Monitor"
echo -e "${CYAN}Project: $PROJECT_ROOT${NC}"
echo -e "${CYAN}Time: $(TZ='America/New_York' date '+%Y-%m-%d %H:%M:%S ET')${NC}"
echo ""

# Check if processes are running
echo ""
print_header "🔍 Process Status"

# Check C++ rotation trader
if pgrep -f "sentio_cli mock --mode live" > /dev/null; then
    TRADER_PID=$(pgrep -f "sentio_cli mock --mode live")
    CPU_TIME=$(ps -p $TRADER_PID -o time= | tr -d ' ')
    START_TIME=$(ps -p $TRADER_PID -o lstart= | awk '{print $2, $3, $4}')
    echo -e "${GREEN}✓ C++ TRADER RUNNING${NC} - PID: $TRADER_PID"
    echo -e "  Started: $START_TIME"
    echo -e "  CPU Time: $CPU_TIME"
else
    echo -e "${RED}✗ C++ TRADER NOT RUNNING${NC}"
    TRADER_RUNNING=false
fi

# Check Python WebSocket bridge (Polygon or Alpaca)
if pgrep -f "polygon_websocket_bridge_rotation" > /dev/null; then
    BRIDGE_PID=$(pgrep -f "polygon_websocket_bridge_rotation")
    BRIDGE_TYPE="Polygon (ALL exchanges)"
elif pgrep -f "alpaca_websocket_bridge_rotation" > /dev/null; then
    BRIDGE_PID=$(pgrep -f "alpaca_websocket_bridge_rotation")
    BRIDGE_TYPE="Alpaca IEX (~2% coverage)"
else
    echo -e "${RED}✗ PYTHON BRIDGE NOT RUNNING${NC}"
    BRIDGE_RUNNING=false
fi

if [[ -n "$BRIDGE_PID" ]]; then
    CPU_TIME=$(ps -p $BRIDGE_PID -o time= | tr -d ' ')
    START_TIME=$(ps -p $BRIDGE_PID -o lstart= | awk '{print $2, $3, $4}')
    echo -e "${GREEN}✓ PYTHON BRIDGE RUNNING${NC} - PID: $BRIDGE_PID"
    echo -e "  Type: $BRIDGE_TYPE"
    echo -e "  Started: $START_TIME"
    echo -e "  CPU Time: $CPU_TIME"
fi

if [[ "$TRADER_RUNNING" == "false" ]] || [[ "$BRIDGE_RUNNING" == "false" ]]; then
    echo ""
    echo "To start live rotation trading:"
    echo "  cd $PROJECT_ROOT"
    echo "  source config.env"
    echo "  ./scripts/launch_rotation_trading.sh live"
    exit 1
fi

# Get latest log files
LATEST_SIGNALS_LOG=$(ls -t $LOG_DIR/signals*.jsonl 2>/dev/null | head -1)
LATEST_TRADES_LOG=$(ls -t $LOG_DIR/trades*.jsonl 2>/dev/null | head -1)
LATEST_POSITIONS_LOG=$(ls -t $LOG_DIR/positions*.jsonl 2>/dev/null | head -1)
LATEST_BRIDGE_LOG=$(ls -t $LOG_DIR/bridge*.log 2>/dev/null | head -1)

if [[ -z "$LATEST_BRIDGE_LOG" ]]; then
    echo -e "${RED}No log files found in $LOG_DIR${NC}"
    exit 1
fi

# Show Python bridge bar reception status
echo ""
print_header "📡 Python WebSocket Bridge Status"

if [[ -f "$LATEST_BRIDGE_LOG" ]]; then
    # Count bars per symbol from bridge log
    echo -e "  ${BOLD}Bars Received by Symbol:${NC}"

    for symbol in TQQQ SQQQ SSO SDS TNA TZA FAS FAZ ERX ERY UVXY SVXY; do
        COUNT=$(grep -c "✓ $symbol" "$LATEST_BRIDGE_LOG" 2>/dev/null || echo "0")
        LAST_BAR=$(grep "✓ $symbol" "$LATEST_BRIDGE_LOG" 2>/dev/null | tail -1)

        if [[ $COUNT -gt 0 ]]; then
            echo -e "    ${GREEN}$symbol${NC}: $COUNT bars"
            if [[ -n "$LAST_BAR" ]]; then
                LAST_PRICE=$(echo "$LAST_BAR" | grep -oP 'C:\s+\K[0-9.]+')
                LAST_TIME=$(echo "$LAST_BAR" | grep -oP '@\s+\K[0-9:]+')
                echo -e "        Last: \$$LAST_PRICE @ $LAST_TIME ET"
            fi
        else
            echo -e "    ${YELLOW}$symbol${NC}: No bars yet"
        fi
    done

    TOTAL_BARS=$(grep -c "✓" "$LATEST_BRIDGE_LOG" 2>/dev/null || echo "0")
    echo -e "\n  ${BOLD}Total Bars:${NC} $TOTAL_BARS"
else
    echo -e "  ${YELLOW}Bridge log not found${NC}"
fi

# Show recent signals (if any)
if [[ -f "$LATEST_SIGNALS_LOG" ]]; then
    SIGNAL_COUNT=$(wc -l < "$LATEST_SIGNALS_LOG" | tr -d ' ')
    echo ""
    print_header "🧠 Recent Signals (last 10 of $SIGNAL_COUNT total)"

    if [[ $SIGNAL_COUNT -gt 0 ]]; then
        # Group signals by symbol and show most recent for each
        echo -e "  ${BOLD}Latest Signal per Symbol:${NC}"
        for symbol in TQQQ SQQQ SSO SDS TNA TZA FAS FAZ ERX ERY UVXY SVXY; do
            LAST_SIGNAL=$(grep "\"$symbol\"" "$LATEST_SIGNALS_LOG" 2>/dev/null | tail -1)
            if [[ -n "$LAST_SIGNAL" ]]; then
                SIGNAL=$(echo "$LAST_SIGNAL" | jq -r '.signal // 0' 2>/dev/null)
                CONFIDENCE=$(echo "$LAST_SIGNAL" | jq -r '.confidence // 0' 2>/dev/null)
                PROBABILITY=$(echo "$LAST_SIGNAL" | jq -r '.probability // 0' 2>/dev/null)

                # Color code by signal
                if [[ "$SIGNAL" == "1" ]]; then
                    COLOR=$GREEN
                    SIGNAL_TEXT="LONG"
                elif [[ "$SIGNAL" == "-1" ]]; then
                    COLOR=$RED
                    SIGNAL_TEXT="SHORT"
                else
                    COLOR=$YELLOW
                    SIGNAL_TEXT="NEUTRAL"
                fi

                printf "    ${COLOR}%-6s${NC} %-8s  Conf: %5.2f%%  Prob: %.4f\n" \
                    "$symbol" "$SIGNAL_TEXT" "$(echo "$CONFIDENCE * 100" | bc -l)" "$PROBABILITY"
            fi
        done
    else
        echo -e "  ${YELLOW}No signals generated yet${NC}"
    fi
fi

# Show recent trades (if any)
if [[ -f "$LATEST_TRADES_LOG" ]]; then
    TRADE_COUNT=$(wc -l < "$LATEST_TRADES_LOG" | tr -d ' ')
    echo ""
    print_header "💰 Recent Trades (last 5 of $TRADE_COUNT total)"

    if [[ $TRADE_COUNT -gt 0 ]]; then
        tail -5 "$LATEST_TRADES_LOG" | while read line; do
            TIMESTAMP=$(echo "$line" | jq -r '.timestamp_ms // "N/A"' 2>/dev/null)
            SYMBOL=$(echo "$line" | jq -r '.symbol // "N/A"' 2>/dev/null)
            ACTION=$(echo "$line" | jq -r '.action // "N/A"' 2>/dev/null)
            QUANTITY=$(echo "$line" | jq -r '.quantity // "N/A"' 2>/dev/null)
            PRICE=$(echo "$line" | jq -r '.price // "N/A"' 2>/dev/null)

            # Format timestamp
            if [[ "$TIMESTAMP" != "N/A" ]]; then
                TIMESTAMP=$(date -r $(echo "$TIMESTAMP / 1000" | bc) "+%H:%M:%S")
            fi

            # Color code by action
            if [[ "$ACTION" == "BUY" ]] || [[ "$ACTION" == "OPEN_LONG" ]]; then
                ACTION_COLOR=$GREEN
            elif [[ "$ACTION" == "SELL" ]] || [[ "$ACTION" == "OPEN_SHORT" ]]; then
                ACTION_COLOR=$RED
            else
                ACTION_COLOR=$YELLOW
            fi

            printf "  ${ACTION_COLOR}%-12s${NC} %6s x%-4s @ \$%-8s  %s\n" \
                "$ACTION" "$SYMBOL" "$QUANTITY" "$PRICE" "$TIMESTAMP"
        done
    else
        echo -e "  ${YELLOW}No trades executed yet${NC}"
    fi
fi

# Show current positions (if any)
if [[ -f "$LATEST_POSITIONS_LOG" ]]; then
    echo ""
    print_header "📈 Current Portfolio Status"

    LATEST_POSITION=$(tail -1 "$LATEST_POSITIONS_LOG" 2>/dev/null)
    if [[ -n "$LATEST_POSITION" ]]; then
        BAR_NUM=$(echo "$LATEST_POSITION" | jq -r '.bar // 0')
        EQUITY=$(echo "$LATEST_POSITION" | jq -r '.current_equity // 100000')
        UNREALIZED_PNL=$(echo "$LATEST_POSITION" | jq -r '.total_unrealized_pnl // 0')

        echo -e "  Bar: #$BAR_NUM"
        echo -e "  Current Equity: ${BOLD}\$$(printf "%.2f" $EQUITY)${NC}"

        if (( $(echo "$UNREALIZED_PNL >= 0" | bc -l 2>/dev/null || echo "0") )); then
            PNL_COLOR=$GREEN
            SIGN="+"
        else
            PNL_COLOR=$RED
            SIGN=""
        fi

        echo -e "  Unrealized P&L: ${PNL_COLOR}${SIGN}\$$(printf "%.2f" $UNREALIZED_PNL)${NC}"

        # Show positions
        POSITION_COUNT=$(echo "$LATEST_POSITION" | jq -r '.positions | length' 2>/dev/null || echo "0")
        if [[ $POSITION_COUNT -gt 0 ]]; then
            echo ""
            echo -e "  ${BOLD}Open Positions ($POSITION_COUNT):${NC}"
            echo "$LATEST_POSITION" | jq -r '.positions[]? | "    \(.symbol): \(.shares) shares @ $\(.entry_price) (P&L: $\(.unrealized_pnl))"' 2>/dev/null
        else
            echo -e "  ${YELLOW}No open positions (100% cash)${NC}"
        fi
    else
        echo -e "  ${YELLOW}No position data available yet${NC}"
    fi
fi

# Show monitoring commands
echo ""
print_header "📊 Monitoring Commands"
echo -e "  ${BOLD}Watch bridge:${NC}         tail -f $LATEST_BRIDGE_LOG"
echo -e "  ${BOLD}Watch signals:${NC}        tail -f $LATEST_SIGNALS_LOG | jq ."
echo -e "  ${BOLD}Watch trades:${NC}         tail -f $LATEST_TRADES_LOG | jq ."
echo -e "  ${BOLD}Watch positions:${NC}      tail -f $LATEST_POSITIONS_LOG | jq ."
echo -e "  ${BOLD}Stop trading:${NC}         pkill -f 'sentio_cli mock --mode live'"
echo -e "  ${BOLD}Stop bridge:${NC}          pkill -f 'alpaca_websocket_bridge_rotation'"

# Show FIFO status
echo ""
print_header "🔗 FIFO Status"
if [[ -p "/tmp/alpaca_bars.fifo" ]]; then
    echo -e "  ${GREEN}✓ FIFO exists${NC}: /tmp/alpaca_bars.fifo"
else
    echo -e "  ${RED}✗ FIFO not found${NC}: /tmp/alpaca_bars.fifo"
fi

echo ""
print_header "🔄 Auto-refresh in 5 seconds... (Ctrl+C to stop)"
echo ""

# Auto-refresh
sleep 5
exec "$0"
