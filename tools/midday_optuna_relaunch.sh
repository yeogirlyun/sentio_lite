#!/bin/bash
# =============================================================================
# Mid-Day Optuna Optimization and Relaunch Script
# =============================================================================
# Runs at 15:15 PM ET (3:15pm) to optimize parameters based on comprehensive data
# Usage: ./midday_optuna_relaunch.sh <comprehensive_warmup_file>
#
# Workflow:
#   1. Liquidate all positions (done by live_trade_command before calling this)
#   2. Run Optuna on comprehensive data (historical 20 blocks + today's bars)
#   3. Compare optimized MRB vs baseline MRB
#   4. Select best parameters
#   5. Return to live_trade_command for parameter update
#
# Note: This script does NOT kill/relaunch - the live trading process updates
#       parameters dynamically and continues running.
#
# Author: Generated by Claude Code
# Date: 2025-10-08
# =============================================================================

set -e

PROJECT_ROOT="/Volumes/ExternalSSD/Dev/C++/online_trader"
BUILD_DIR="$PROJECT_ROOT/build"
DATA_DIR="$PROJECT_ROOT/data"
WARMUP_DATA_FILE="${1:-$DATA_DIR/tmp/comprehensive_warmup_$(date '+%Y-%m-%d').csv}"

# Baseline parameters (from v1.0 config)
BASELINE_BUY=0.55
BASELINE_SELL=0.45
BASELINE_LAMBDA=0.995

echo "============================================"
echo "Mid-Day Optuna Optimization (15:15 PM ET / 3:15pm)"
echo "============================================"
echo "Time: $(TZ='America/New_York' date '+%Y-%m-%d %H:%M:%S ET')"
echo ""

# Step 1: Verify comprehensive warmup file exists
if [[ ! -f "$WARMUP_DATA_FILE" ]]; then
    echo "❌ Warmup data file not found: $WARMUP_DATA_FILE"
    echo "Cannot run optimization - continuing with baseline parameters"
    exit 1
fi

BAR_COUNT=$(tail -n +2 "$WARMUP_DATA_FILE" | wc -l | tr -d ' ')
echo "✓ Comprehensive warmup data loaded: $BAR_COUNT bars"
echo ""

# Step 2: Generate signals with BASELINE parameters
echo "=== Step 1: Baseline Performance ==="
echo "Testing baseline parameters on comprehensive data..."
echo "  buy_threshold: $BASELINE_BUY"
echo "  sell_threshold: $BASELINE_SELL"
echo "  ewrls_lambda: $BASELINE_LAMBDA"
echo ""

BASELINE_SIGNALS="$DATA_DIR/tmp/midday_baseline_signals.jsonl"
BASELINE_TRADES="$DATA_DIR/tmp/midday_baseline_trades.jsonl"

# Calculate warmup bars: 20 blocks * 390 bars/block = 7800 bars
WARMUP_BARS=7800

$BUILD_DIR/sentio_cli generate-signals \
    --data "$WARMUP_DATA_FILE" \
    --output "$BASELINE_SIGNALS" \
    --warmup $WARMUP_BARS \
    2>&1 | grep -E "(Generating|Complete|MRB)" || true

$BUILD_DIR/sentio_cli execute-trades \
    --signals "$BASELINE_SIGNALS" \
    --data "$WARMUP_DATA_FILE" \
    --output "$BASELINE_TRADES" \
    --warmup $WARMUP_BARS \
    2>&1 | grep -E "(Executing|Complete|MRB)" || true

# Extract baseline MRB
BASELINE_MRB=$(grep "MRB" "$BASELINE_TRADES" | tail -1 | awk '{print $NF}' | tr -d '%' || echo "0.0")
echo "✓ Baseline MRB: $BASELINE_MRB%"
echo ""

# Step 3: Run Optuna optimization
echo "=== Step 2: Optuna Optimization ==="
echo "Running Optuna on comprehensive data (50 trials, 5 minutes timeout)..."
echo ""

OPTUNA_OUTPUT="$DATA_DIR/tmp/midday_optuna_$(date '+%Y%m%d_%H%M%S').json"

timeout 300 python3 tools/adaptive_optuna.py \
    --strategy B \
    --data "$WARMUP_DATA_FILE" \
    --build-dir "$BUILD_DIR" \
    --output "$OPTUNA_OUTPUT" \
    --trials 50 \
    2>&1 | tail -20 || echo "Optuna completed (or timeout)"

echo ""

# Step 4: Extract optimized parameters and MRB
# Initialize selected parameters with baseline values
SELECTED_PARAMS="baseline"
SELECTED_BUY=$BASELINE_BUY
SELECTED_SELL=$BASELINE_SELL
SELECTED_LAMBDA=$BASELINE_LAMBDA
SELECTED_MRB=$BASELINE_MRB

if [[ ! -f "$OPTUNA_OUTPUT" ]]; then
    echo "❌ Optuna output not found - using baseline parameters"
else
    OPTUNA_BUY=$(jq -r '.best_params.buy_threshold' "$OPTUNA_OUTPUT" 2>/dev/null || echo "$BASELINE_BUY")
    OPTUNA_SELL=$(jq -r '.best_params.sell_threshold' "$OPTUNA_OUTPUT" 2>/dev/null || echo "$BASELINE_SELL")
    OPTUNA_LAMBDA=$(jq -r '.best_params.ewrls_lambda' "$OPTUNA_OUTPUT" 2>/dev/null || echo "$BASELINE_LAMBDA")
    OPTUNA_MRB=$(jq -r '.best_mrb' "$OPTUNA_OUTPUT" 2>/dev/null || echo "0.0")

    echo "✓ Optuna MRB: $OPTUNA_MRB%"
    echo "  Optimized parameters:"
    echo "    buy_threshold: $OPTUNA_BUY"
    echo "    sell_threshold: $OPTUNA_SELL"
    echo "    ewrls_lambda: $OPTUNA_LAMBDA"
    echo ""

    # Step 5: Compare and select best
    echo "=== Step 3: Parameter Selection ==="
    if (( $(echo "$OPTUNA_MRB > $BASELINE_MRB" | bc -l) )); then
        echo "🎯 Optuna parameters are BETTER (MRB: $OPTUNA_MRB% > $BASELINE_MRB%)"
        echo "   Using optimized parameters for afternoon session"
        SELECTED_PARAMS="optuna"
        SELECTED_BUY=$OPTUNA_BUY
        SELECTED_SELL=$OPTUNA_SELL
        SELECTED_LAMBDA=$OPTUNA_LAMBDA
        SELECTED_MRB=$OPTUNA_MRB
    else
        echo "📊 Baseline parameters are BETTER (MRB: $BASELINE_MRB% >= $OPTUNA_MRB%)"
        echo "   Continuing with baseline parameters"
        SELECTED_PARAMS="baseline"
        SELECTED_BUY=$BASELINE_BUY
        SELECTED_SELL=$BASELINE_SELL
        SELECTED_LAMBDA=$BASELINE_LAMBDA
        SELECTED_MRB=$BASELINE_MRB
    fi
fi

echo ""
echo "=== Selected Configuration ==="
echo "  Source: $SELECTED_PARAMS"
echo "  buy_threshold: $SELECTED_BUY"
echo "  sell_threshold: $SELECTED_SELL"
echo "  ewrls_lambda: $SELECTED_LAMBDA"
echo "  Expected MRB: $SELECTED_MRB%"
echo ""

# Step 6: Save selected parameters for live trading to pick up
# Ensure MRB has a valid value (default to 0.0 if empty)
SELECTED_MRB=${SELECTED_MRB:-0.0}

cat > "$DATA_DIR/tmp/midday_selected_params.json" <<EOF
{
  "source": "$SELECTED_PARAMS",
  "buy_threshold": $SELECTED_BUY,
  "sell_threshold": $SELECTED_SELL,
  "ewrls_lambda": $SELECTED_LAMBDA,
  "expected_mrb": $SELECTED_MRB,
  "timestamp": "$(date '+%Y-%m-%d %H:%M:%S ET')"
}
EOF

echo "✓ Parameters saved to: $DATA_DIR/tmp/midday_selected_params.json"
echo ""

echo "============================================"
echo "✅ Mid-Day Optimization Complete"
echo "============================================"
echo ""
echo "Next: Live trading will update parameters dynamically and continue"
echo "      Afternoon session: 15:16 PM - 15:58 PM ET"
echo ""

exit 0
