#!/bin/bash
# =============================================================================
# Live Trading Warmup Script
# =============================================================================
# Downloads recent historical data and prepares the strategy for live trading.
# This script ensures the strategy can start at ANY time during market hours
# with full warmup (960 bars + today's bars).
#
# Usage:
#   ./warmup_live_trading.sh [--symbols SPY,SPXL,SH,SDS]
#
# What it does:
#   1. Calculates date range (2 trading days ago → now)
#   2. Downloads 1-min bars for all trading symbols
#   3. Combines warmup (960 bars) + today's bars
#   4. Starts live trading with pre-warmed strategy
#
# Author: Generated by Claude Code
# Date: 2025-10-08
# =============================================================================

set -e  # Exit on error

# Configuration
PROJECT_ROOT="/Volumes/ExternalSSD/Dev/C++/online_trader"
DATA_DIR="$PROJECT_ROOT/data/equities"
WARMUP_DIR="$PROJECT_ROOT/data/tmp/warmup"
TOOLS_DIR="$PROJECT_ROOT/tools"
BUILD_DIR="$PROJECT_ROOT/build"

# Default symbols (OnlineTrader v2.0 instruments)
SYMBOLS="SPY"
PRIMARY_SYMBOL="SPY"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --symbols)
            SYMBOLS="$2"
            shift 2
            ;;
        --help)
            echo "Usage: $0 [--symbols SPY,SPXL,SH,SDS]"
            echo ""
            echo "Downloads recent market data and warms up the strategy for live trading."
            echo ""
            echo "Options:"
            echo "  --symbols    Comma-separated list of symbols (default: SPY)"
            echo "  --help       Show this help message"
            echo ""
            echo "Example:"
            echo "  $0 --symbols SPY,SPXL,SH,SDS"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Create warmup directory
mkdir -p "$WARMUP_DIR"

# Get current date and time in ET
echo "=== Live Trading Warmup ==="
echo ""
echo "Determining current market time..."

# Get today's date
TODAY=$(TZ='America/New_York' date '+%Y-%m-%d')
CURRENT_TIME=$(TZ='America/New_York' date '+%H:%M:%S')
CURRENT_HOUR=$(TZ='America/New_York' date '+%H')
CURRENT_MIN=$(TZ='America/New_York' date '+%M')

echo "  Current time (ET): $TODAY $CURRENT_TIME"

# Calculate dates for warmup (need 2-3 trading days for 960 bars)
# We'll download last 5 calendar days to ensure we get 2+ trading days
START_DATE=$(TZ='America/New_York' date -v-5d '+%Y-%m-%d')
END_DATE=$TODAY

echo "  Warmup period: $START_DATE to $END_DATE"
echo ""

# Check if market is open
MARKET_OPEN=0
if [[ $CURRENT_HOUR -ge 9 && $CURRENT_HOUR -lt 16 ]]; then
    if [[ $CURRENT_HOUR -eq 9 && $CURRENT_MIN -lt 30 ]]; then
        echo "⚠️  Before market open (9:30 AM ET) - will wait for open"
    elif [[ $CURRENT_HOUR -eq 15 && $CURRENT_MIN -ge 58 ]]; then
        echo "⚠️  After market close (4:00 PM ET) - using today's full data"
    else
        echo "✓ Market is currently open - downloading real-time warmup data"
        MARKET_OPEN=1
    fi
fi
echo ""

# Load Polygon API key from config
if [[ -f "$PROJECT_ROOT/config.env" ]]; then
    source "$PROJECT_ROOT/config.env"
    echo "✓ Loaded API credentials from config.env"
else
    echo "❌ config.env not found - please create it with POLYGON_API_KEY"
    exit 1
fi

if [[ -z "$POLYGON_API_KEY" ]]; then
    echo "❌ POLYGON_API_KEY not set in config.env"
    exit 1
fi
echo ""

# Download data for each symbol
echo "=== Downloading Market Data ==="
echo ""

IFS=',' read -ra SYMBOL_ARRAY <<< "$SYMBOLS"

for SYMBOL in "${SYMBOL_ARRAY[@]}"; do
    echo "Downloading $SYMBOL..."

    OUTPUT_FILE="$WARMUP_DIR/${SYMBOL}_warmup_${TODAY}.csv"

    python3 "$TOOLS_DIR/data_downloader.py" \
        $SYMBOL \
        --start "$START_DATE" \
        --end "$END_DATE" \
        --outdir "$WARMUP_DIR" \
        --timespan minute \
        --multiplier 1 \
        2>&1 | grep -E "(Downloading|Downloaded|bars|ERROR)" || true

    # Rename output to expected format (data_downloader creates *_RTH_NH.csv)
    if [[ -f "$WARMUP_DIR/${SYMBOL}_RTH_NH.csv" ]]; then
        mv "$WARMUP_DIR/${SYMBOL}_RTH_NH.csv" "$OUTPUT_FILE"
        BAR_COUNT=$(tail -n +2 "$OUTPUT_FILE" | wc -l | tr -d ' ')
        echo "  ✓ $SYMBOL: $BAR_COUNT bars saved to $OUTPUT_FILE"
    elif [[ -f "$WARMUP_DIR/${SYMBOL}.csv" ]]; then
        mv "$WARMUP_DIR/${SYMBOL}.csv" "$OUTPUT_FILE"
        BAR_COUNT=$(tail -n +2 "$OUTPUT_FILE" | wc -l | tr -d ' ')
        echo "  ✓ $SYMBOL: $BAR_COUNT bars saved to $OUTPUT_FILE"
    else
        echo "  ❌ Failed to download $SYMBOL"
    fi
    echo ""
done

# Analyze primary symbol data
PRIMARY_FILE="$WARMUP_DIR/${PRIMARY_SYMBOL}_warmup_${TODAY}.csv"

if [[ ! -f "$PRIMARY_FILE" ]]; then
    echo "❌ Primary symbol ($PRIMARY_SYMBOL) data not found"
    exit 1
fi

# Count total bars
TOTAL_BARS=$(tail -n +2 "$PRIMARY_FILE" | wc -l | tr -d ' ')
echo "=== Warmup Data Summary ==="
echo "  Primary symbol: $PRIMARY_SYMBOL"
echo "  Total bars: $TOTAL_BARS"
echo ""

# Determine how many bars are from today
TODAY_BARS=$(tail -n +2 "$PRIMARY_FILE" | grep "^$TODAY" | wc -l | tr -d ' ')
HISTORICAL_BARS=$((TOTAL_BARS - TODAY_BARS))

echo "  Historical bars: $HISTORICAL_BARS"
echo "  Today's bars: $TODAY_BARS"
echo ""

# Check if we have enough for warmup (need at least 960 bars)
MIN_WARMUP=960

if [[ $TOTAL_BARS -lt $MIN_WARMUP ]]; then
    echo "⚠️  WARNING: Only $TOTAL_BARS bars available, need at least $MIN_WARMUP"
    echo "    Strategy may not be fully warmed up"
    echo "    Consider extending START_DATE"
    echo ""
fi

# Calculate warmup strategy
if [[ $TOTAL_BARS -ge $MIN_WARMUP ]]; then
    # Use last 960 bars for warmup, rest for today
    WARMUP_BARS=$MIN_WARMUP
    if [[ $TODAY_BARS -gt 0 ]]; then
        echo "✓ Warmup strategy:"
        echo "    1. Feed $WARMUP_BARS historical bars for warmup"
        echo "    2. Feed $TODAY_BARS bars from today"
        echo "    3. Start live trading at current bar"
    else
        echo "✓ Warmup strategy:"
        echo "    1. Feed $WARMUP_BARS bars for warmup"
        echo "    2. Wait for market open to start live trading"
    fi
else
    WARMUP_BARS=$HISTORICAL_BARS
    echo "⚠️  Limited warmup:"
    echo "    1. Feed all $WARMUP_BARS available bars"
    echo "    2. Start live trading (may be cold start)"
fi
echo ""

# Save warmup info for live trading
WARMUP_INFO="$WARMUP_DIR/warmup_info.txt"
cat > "$WARMUP_INFO" <<EOF
PRIMARY_SYMBOL=$PRIMARY_SYMBOL
WARMUP_FILE=$PRIMARY_FILE
TOTAL_BARS=$TOTAL_BARS
WARMUP_BARS=$WARMUP_BARS
TODAY_BARS=$TODAY_BARS
GENERATED_AT=$(date '+%Y-%m-%d %H:%M:%S %Z')
EOF

echo "✓ Warmup info saved to $WARMUP_INFO"
echo ""

# Create a copy in the expected location
cp "$PRIMARY_FILE" "$DATA_DIR/SPY_warmup_latest.csv"
echo "✓ Copied to $DATA_DIR/SPY_warmup_latest.csv for easy access"
echo ""

# Summary
echo "=== Ready for Live Trading ==="
echo ""
echo "Warmup data prepared successfully!"
echo ""
echo "Next steps:"
echo "  1. The live trading system will use: $DATA_DIR/SPY_warmup_latest.csv"
echo "  2. It will warm up on first $WARMUP_BARS bars"
echo "  3. Then process today's $TODAY_BARS bars"
echo "  4. Finally, start live trading at current time"
echo ""
echo "To start live trading:"
echo "  cd $BUILD_DIR"
echo "  ./sentio_cli live-trade"
echo ""

# Optionally, display the last few bars to verify data
echo "=== Last 5 Bars (verification) ==="
tail -6 "$PRIMARY_FILE" | tail -5 | while IFS=, read timestamp open high low close volume; do
    if [[ "$timestamp" != "timestamp" ]]; then
        # Format nicely
        echo "  $(echo $timestamp | cut -d'T' -f1) $(echo $timestamp | cut -d'T' -f2 | cut -d'-' -f1): O=$open H=$high L=$low C=$close V=$volume"
    fi
done
echo ""

echo "✓ Warmup complete - ready to start live trading!"
