#!/bin/bash
# =============================================================================
# Live Trading Monitor
# =============================================================================
# Real-time monitoring dashboard for OnlineTrader v1.0
# Usage: ./tools/monitor_live_trading.sh
#
# Features:
#   - Process status
#   - Latest system messages
#   - Recent signals and trades
#   - Account balance and positions
#   - Auto-refresh every 5 seconds
#
# Author: Generated by Claude Code
# Date: 2025-10-08
# =============================================================================

PROJECT_ROOT="/Volumes/ExternalSSD/Dev/C++/online_trader"
LOG_DIR="$PROJECT_ROOT/logs/live_trading"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to print section header
print_header() {
    echo -e "${BOLD}${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BOLD}${CYAN}$1${NC}"
    echo -e "${BOLD}${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# Clear screen and show header
clear
echo ""
print_header "üìä OnlineTrader v1.0 Live Trading Monitor"
echo -e "${CYAN}Project: $PROJECT_ROOT${NC}"
echo -e "${CYAN}Time: $(TZ='America/New_York' date '+%Y-%m-%d %H:%M:%S ET')${NC}"
echo ""

# Check if process is running
echo ""
print_header "üîç Process Status"
if pgrep -f "sentio_cli live-trade" > /dev/null; then
    PID=$(pgrep -f "sentio_cli live-trade")
    CPU_TIME=$(ps -p $PID -o time= | tr -d ' ')
    START_TIME=$(ps -p $PID -o lstart=)
    echo -e "${GREEN}‚úì RUNNING${NC} - PID: $PID"
    echo -e "  Started: $START_TIME"
    echo -e "  CPU Time: $CPU_TIME"
else
    echo -e "${RED}‚úó NOT RUNNING${NC}"
    echo ""
    echo "To start live trading:"
    echo "  cd $PROJECT_ROOT"
    echo "  source config.env"
    echo "  ./build/sentio_cli live-trade"
    exit 1
fi

# Get latest log file
LATEST_SYSTEM_LOG=$(ls -t $LOG_DIR/system_*.log 2>/dev/null | head -1)
LATEST_SIGNALS_LOG=$(ls -t $LOG_DIR/signals_*.jsonl 2>/dev/null | head -1)
LATEST_TRADES_LOG=$(ls -t $LOG_DIR/trades_*.jsonl 2>/dev/null | head -1)
LATEST_POSITIONS_LOG=$(ls -t $LOG_DIR/positions_*.jsonl 2>/dev/null | head -1)

if [[ -z "$LATEST_SYSTEM_LOG" ]]; then
    echo -e "${RED}No log files found in $LOG_DIR${NC}"
    exit 1
fi

# Show bar reception status
echo ""
print_header "üì° Live Bar Reception Status"

# Count bars received
BAR_COUNT=$(grep -c "New bar received\|BAR #" "$LATEST_SYSTEM_LOG" 2>/dev/null | head -1 || echo "0")
WARMUP_COMPLETE=$(grep -c "Warmup complete\|Strategy Warmup Complete" "$LATEST_SYSTEM_LOG" 2>/dev/null | head -1 || echo "0")

if [[ $WARMUP_COMPLETE -gt 0 ]]; then
    echo -e "  ${GREEN}‚úì Warmup Complete${NC} - Live Trading Active"
else
    echo -e "  ${YELLOW}‚è≥ Warmup In Progress${NC}"
fi

echo -e "  ${BOLD}Bars Received:${NC} $BAR_COUNT"

# Show last 5 bars received
LAST_BARS=$(grep -E "New bar received|BAR #|OHLC:" "$LATEST_SYSTEM_LOG" 2>/dev/null | tail -10)
if [[ -n "$LAST_BARS" ]]; then
    echo -e "\n  ${BOLD}Recent Bars:${NC}"
    echo "$LAST_BARS" | tail -5 | sed 's/^/    /'
else
    echo -e "  ${YELLOW}Waiting for first bar...${NC}"
fi

# Show latest system messages
echo ""
print_header "üìù Latest System Messages (last 12 lines)"
tail -12 "$LATEST_SYSTEM_LOG" | sed 's/^/  /'

# Show recent signals (if any)
if [[ -f "$LATEST_SIGNALS_LOG" ]]; then
    SIGNAL_COUNT=$(wc -l < "$LATEST_SIGNALS_LOG" | tr -d ' ')
    echo ""
    print_header "üß† Recent Signals (last 5 of $SIGNAL_COUNT total)"

    if [[ $SIGNAL_COUNT -gt 0 ]]; then
        tail -5 "$LATEST_SIGNALS_LOG" | while read line; do
            TIMESTAMP=$(echo "$line" | jq -r '.timestamp // "N/A"' 2>/dev/null)
            PREDICTION=$(echo "$line" | jq -r '.prediction // "N/A"' 2>/dev/null)
            PROBABILITY=$(echo "$line" | jq -r '.probability // "N/A"' 2>/dev/null)
            CONFIDENCE=$(echo "$line" | jq -r '.confidence // "N/A"' 2>/dev/null)

            if [[ "$PREDICTION" == "LONG" ]]; then
                COLOR=$GREEN
            elif [[ "$PREDICTION" == "SHORT" ]]; then
                COLOR=$RED
            else
                COLOR=$YELLOW
            fi

            echo -e "  ${COLOR}$PREDICTION${NC} @ $TIMESTAMP (prob=$PROBABILITY, conf=$CONFIDENCE)"
        done
    else
        echo -e "  ${YELLOW}No signals generated yet${NC}"
    fi
fi

# Show recent trades (if any)
if [[ -f "$LATEST_TRADES_LOG" ]]; then
    TRADE_COUNT=$(wc -l < "$LATEST_TRADES_LOG" | tr -d ' ')
    echo ""
    print_header "üí∞ Recent Trades (last 5 of $TRADE_COUNT total)"

    if [[ $TRADE_COUNT -gt 0 ]]; then
        tail -5 "$LATEST_TRADES_LOG" | while read line; do
            TIMESTAMP=$(echo "$line" | jq -r '.timestamp // "N/A"' 2>/dev/null)
            SYMBOL=$(echo "$line" | jq -r '.symbol // "N/A"' 2>/dev/null)
            SIDE=$(echo "$line" | jq -r '.side // "N/A"' 2>/dev/null)
            QUANTITY=$(echo "$line" | jq -r '.quantity // "N/A"' 2>/dev/null)
            STATUS=$(echo "$line" | jq -r '.status // "N/A"' 2>/dev/null)
            ORDER_ID=$(echo "$line" | jq -r '.order_id // "N/A"' 2>/dev/null)

            # Color code by side
            if [[ "$SIDE" == "buy" ]]; then
                SIDE_COLOR=$GREEN
                SIDE_TEXT="BUY"
            elif [[ "$SIDE" == "sell" ]]; then
                SIDE_COLOR=$RED
                SIDE_TEXT="SELL"
            else
                SIDE_COLOR=$YELLOW
                SIDE_TEXT="$SIDE"
            fi

            echo -e "  ${SIDE_COLOR}$SIDE_TEXT${NC} $QUANTITY $SYMBOL @ $TIMESTAMP"
            echo -e "    Status: $STATUS | Order: ${ORDER_ID:0:8}..."
        done
    else
        echo -e "  ${YELLOW}No trades executed yet${NC}"
    fi
fi

# Show current positions (if any)
if [[ -f "$LATEST_POSITIONS_LOG" ]]; then
    echo ""
    print_header "üìà Current Portfolio Status"

    LATEST_POSITION=$(tail -1 "$LATEST_POSITIONS_LOG" 2>/dev/null)
    if [[ -n "$LATEST_POSITION" ]]; then
        TIMESTAMP=$(echo "$LATEST_POSITION" | jq -r '.timestamp // "N/A"')
        CASH=$(echo "$LATEST_POSITION" | jq -r '.cash // 0')
        PORTFOLIO_VALUE=$(echo "$LATEST_POSITION" | jq -r '.portfolio_value // 0')
        TOTAL_RETURN=$(echo "$LATEST_POSITION" | jq -r '.total_return // 0')
        TOTAL_RETURN_PCT=$(echo "$LATEST_POSITION" | jq -r '.total_return_pct // 0')

        echo -e "  Last Update: $TIMESTAMP"
        echo -e "  Cash: ${GREEN}\$$(printf "%.2f" $CASH)${NC}"
        echo -e "  Portfolio Value: ${BOLD}\$$(printf "%.2f" $PORTFOLIO_VALUE)${NC}"

        if (( $(echo "$TOTAL_RETURN >= 0" | bc -l) )); then
            RETURN_COLOR=$GREEN
            SIGN="+"
        else
            RETURN_COLOR=$RED
            SIGN=""
        fi

        echo -e "  Total Return: ${RETURN_COLOR}${SIGN}\$$(printf "%.2f" $TOTAL_RETURN) (${SIGN}$(printf "%.2f" $(echo "$TOTAL_RETURN_PCT * 100" | bc -l))%)${NC}"

        # Show positions
        POSITIONS=$(echo "$LATEST_POSITION" | jq -r '.positions[]?' 2>/dev/null)
        if [[ -n "$POSITIONS" ]]; then
            echo ""
            echo -e "  ${BOLD}Open Positions:${NC}"
            echo "$LATEST_POSITION" | jq -r '.positions[] | "    \(.symbol): \(.quantity) shares @ $\(.avg_entry_price) (P&L: $\(.unrealized_pl))"' 2>/dev/null
        else
            echo -e "  ${YELLOW}No open positions (100% cash)${NC}"
        fi
    else
        echo -e "  ${YELLOW}No position data available yet${NC}"
    fi
fi

# Show monitoring commands
echo ""
print_header "üìä Monitoring Commands"
echo -e "  ${BOLD}Watch system log:${NC}     tail -f $LATEST_SYSTEM_LOG"
echo -e "  ${BOLD}Watch signals:${NC}        tail -f $LATEST_SIGNALS_LOG | jq ."
echo -e "  ${BOLD}Watch trades:${NC}         tail -f $LATEST_TRADES_LOG | jq ."
echo -e "  ${BOLD}Watch positions:${NC}      tail -f $LATEST_POSITIONS_LOG | jq ."
echo -e "  ${BOLD}Stop trading:${NC}         pkill -f 'sentio_cli live-trade'"

echo ""
print_header "üîÑ Auto-refresh in 5 seconds... (Ctrl+C to stop)"
echo ""

# Auto-refresh
sleep 5
exec "$0"
